// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// LoggerMock is a mock implementation of http.Logger.
//
//	func TestSomethingThatUsesLogger(t *testing.T) {
//
//		// make and configure a mocked http.Logger
//		mockedLogger := &LoggerMock{
//			ErrorFunc: func(ctx context.Context, args ...interface{})  {
//				panic("mock out the Error method")
//			},
//		}
//
//		// use mockedLogger in code that requires http.Logger
//		// and then make assertions.
//
//	}
type LoggerMock struct {
	// ErrorFunc mocks the Error method.
	ErrorFunc func(ctx context.Context, args ...interface{})

	// calls tracks calls to the methods.
	calls struct {
		// Error holds details about calls to the Error method.
		Error []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args []interface{}
		}
	}
	lockError sync.RWMutex
}

// Error calls ErrorFunc.
func (mock *LoggerMock) Error(ctx context.Context, args ...interface{}) {
	callInfo := struct {
		Ctx  context.Context
		Args []interface{}
	}{
		Ctx:  ctx,
		Args: args,
	}
	mock.lockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	mock.lockError.Unlock()
	if mock.ErrorFunc == nil {
		return
	}
	mock.ErrorFunc(ctx, args...)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//
//	len(mockedLogger.ErrorCalls())
func (mock *LoggerMock) ErrorCalls() []struct {
	Ctx  context.Context
	Args []interface{}
} {
	var calls []struct {
		Ctx  context.Context
		Args []interface{}
	}
	mock.lockError.RLock()
	calls = mock.calls.Error
	mock.lockError.RUnlock()
	return calls
}
