// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	entity "url-checker/internal/domain"
)

// CheckerMock is a mock implementation of http.Checker.
//
//	func TestSomethingThatUsesChecker(t *testing.T) {
//
//		// make and configure a mocked http.Checker
//		mockedChecker := &CheckerMock{
//			AddUrlFunc: func(ctx context.Context, url string) error {
//				panic("mock out the AddUrl method")
//			},
//			GetStatusFunc: func(ctx context.Context, url string) (entity.Status, error) {
//				panic("mock out the GetStatus method")
//			},
//		}
//
//		// use mockedChecker in code that requires http.Checker
//		// and then make assertions.
//
//	}
type CheckerMock struct {
	// AddUrlFunc mocks the AddUrl method.
	AddUrlFunc func(ctx context.Context, url string) error

	// GetStatusFunc mocks the GetStatus method.
	GetStatusFunc func(ctx context.Context, url string) (entity.Status, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddUrl holds details about calls to the AddUrl method.
		AddUrl []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
		// GetStatus holds details about calls to the GetStatus method.
		GetStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
	}
	lockAddUrl    sync.RWMutex
	lockGetStatus sync.RWMutex
}

// AddUrl calls AddUrlFunc.
func (mock *CheckerMock) AddUrl(ctx context.Context, url string) error {
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockAddUrl.Lock()
	mock.calls.AddUrl = append(mock.calls.AddUrl, callInfo)
	mock.lockAddUrl.Unlock()
	if mock.AddUrlFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.AddUrlFunc(ctx, url)
}

// AddUrlCalls gets all the calls that were made to AddUrl.
// Check the length with:
//
//	len(mockedChecker.AddUrlCalls())
func (mock *CheckerMock) AddUrlCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockAddUrl.RLock()
	calls = mock.calls.AddUrl
	mock.lockAddUrl.RUnlock()
	return calls
}

// GetStatus calls GetStatusFunc.
func (mock *CheckerMock) GetStatus(ctx context.Context, url string) (entity.Status, error) {
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockGetStatus.Lock()
	mock.calls.GetStatus = append(mock.calls.GetStatus, callInfo)
	mock.lockGetStatus.Unlock()
	if mock.GetStatusFunc == nil {
		var (
			statusOut entity.Status
			errOut    error
		)
		return statusOut, errOut
	}
	return mock.GetStatusFunc(ctx, url)
}

// GetStatusCalls gets all the calls that were made to GetStatus.
// Check the length with:
//
//	len(mockedChecker.GetStatusCalls())
func (mock *CheckerMock) GetStatusCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockGetStatus.RLock()
	calls = mock.calls.GetStatus
	mock.lockGetStatus.RUnlock()
	return calls
}
