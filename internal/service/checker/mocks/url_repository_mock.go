// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
	entity "url-checker/internal/domain"
)

// UrlRepositoryMock is a mock implementation of checker.UrlRepository.
//
//	func TestSomethingThatUsesUrlRepository(t *testing.T) {
//
//		// make and configure a mocked checker.UrlRepository
//		mockedUrlRepository := &UrlRepositoryMock{
//			GetFunc: func(ctx context.Context, url string) (entity.UrlInfo, error) {
//				panic("mock out the Get method")
//			},
//			GetAllUrlsFunc: func(ctx context.Context) []string {
//				panic("mock out the GetAllUrls method")
//			},
//			GetAllUrlsToCheckFunc: func(ctx context.Context) []string {
//				panic("mock out the GetAllUrlsToCheck method")
//			},
//			UpdateStatusFunc: func(ctx context.Context, url string, status entity.Status) error {
//				panic("mock out the UpdateStatus method")
//			},
//		}
//
//		// use mockedUrlRepository in code that requires checker.UrlRepository
//		// and then make assertions.
//
//	}
type UrlRepositoryMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, url string) (entity.UrlInfo, error)

	// GetAllUrlsFunc mocks the GetAllUrls method.
	GetAllUrlsFunc func(ctx context.Context) []string

	// GetAllUrlsToCheckFunc mocks the GetAllUrlsToCheck method.
	GetAllUrlsToCheckFunc func(ctx context.Context) []string

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(ctx context.Context, url string, status entity.Status) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
		// GetAllUrls holds details about calls to the GetAllUrls method.
		GetAllUrls []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetAllUrlsToCheck holds details about calls to the GetAllUrlsToCheck method.
		GetAllUrlsToCheck []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
			// Status is the status argument value.
			Status entity.Status
		}
	}
	lockGet               sync.RWMutex
	lockGetAllUrls        sync.RWMutex
	lockGetAllUrlsToCheck sync.RWMutex
	lockUpdateStatus      sync.RWMutex
}

// Get calls GetFunc.
func (mock *UrlRepositoryMock) Get(ctx context.Context, url string) (entity.UrlInfo, error) {
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			urlInfoOut entity.UrlInfo
			errOut     error
		)
		return urlInfoOut, errOut
	}
	return mock.GetFunc(ctx, url)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedUrlRepository.GetCalls())
func (mock *UrlRepositoryMock) GetCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetAllUrls calls GetAllUrlsFunc.
func (mock *UrlRepositoryMock) GetAllUrls(ctx context.Context) []string {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUrls.Lock()
	mock.calls.GetAllUrls = append(mock.calls.GetAllUrls, callInfo)
	mock.lockGetAllUrls.Unlock()
	if mock.GetAllUrlsFunc == nil {
		var (
			stringsOut []string
		)
		return stringsOut
	}
	return mock.GetAllUrlsFunc(ctx)
}

// GetAllUrlsCalls gets all the calls that were made to GetAllUrls.
// Check the length with:
//
//	len(mockedUrlRepository.GetAllUrlsCalls())
func (mock *UrlRepositoryMock) GetAllUrlsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUrls.RLock()
	calls = mock.calls.GetAllUrls
	mock.lockGetAllUrls.RUnlock()
	return calls
}

// GetAllUrlsToCheck calls GetAllUrlsToCheckFunc.
func (mock *UrlRepositoryMock) GetAllUrlsToCheck(ctx context.Context) []string {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllUrlsToCheck.Lock()
	mock.calls.GetAllUrlsToCheck = append(mock.calls.GetAllUrlsToCheck, callInfo)
	mock.lockGetAllUrlsToCheck.Unlock()
	if mock.GetAllUrlsToCheckFunc == nil {
		var (
			stringsOut []string
		)
		return stringsOut
	}
	return mock.GetAllUrlsToCheckFunc(ctx)
}

// GetAllUrlsToCheckCalls gets all the calls that were made to GetAllUrlsToCheck.
// Check the length with:
//
//	len(mockedUrlRepository.GetAllUrlsToCheckCalls())
func (mock *UrlRepositoryMock) GetAllUrlsToCheckCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllUrlsToCheck.RLock()
	calls = mock.calls.GetAllUrlsToCheck
	mock.lockGetAllUrlsToCheck.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *UrlRepositoryMock) UpdateStatus(ctx context.Context, url string, status entity.Status) error {
	callInfo := struct {
		Ctx    context.Context
		URL    string
		Status entity.Status
	}{
		Ctx:    ctx,
		URL:    url,
		Status: status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	if mock.UpdateStatusFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateStatusFunc(ctx, url, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//
//	len(mockedUrlRepository.UpdateStatusCalls())
func (mock *UrlRepositoryMock) UpdateStatusCalls() []struct {
	Ctx    context.Context
	URL    string
	Status entity.Status
} {
	var calls []struct {
		Ctx    context.Context
		URL    string
		Status entity.Status
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}
